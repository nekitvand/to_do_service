// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/to_do_service/to_do_service.proto

package proto_to_do_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToDoServiceClient is the client API for ToDoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToDoServiceClient interface {
	CreateToDo(ctx context.Context, in *CreateToDoRequest, opts ...grpc.CallOption) (*CreateToDoResponse, error)
	GetAllToDo(ctx context.Context, in *GetAllToDoRequest, opts ...grpc.CallOption) (*GetAllToDoResponse, error)
	GetToDoById(ctx context.Context, in *GetToDoByIdRequest, opts ...grpc.CallOption) (*GetToDoByIdResponse, error)
	UpdateFieldToDo(ctx context.Context, in *UpdateFieldToDoRequest, opts ...grpc.CallOption) (*UpdateFieldToDoResponse, error)
	UpdateToDo(ctx context.Context, in *UpdateToDoRequest, opts ...grpc.CallOption) (*UpdateToDoResponse, error)
	DeleteToDo(ctx context.Context, in *DeleteToDoRequest, opts ...grpc.CallOption) (*DeleteToDoResponse, error)
}

type toDoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToDoServiceClient(cc grpc.ClientConnInterface) ToDoServiceClient {
	return &toDoServiceClient{cc}
}

func (c *toDoServiceClient) CreateToDo(ctx context.Context, in *CreateToDoRequest, opts ...grpc.CallOption) (*CreateToDoResponse, error) {
	out := new(CreateToDoResponse)
	err := c.cc.Invoke(ctx, "/api.to_do_service.v1.ToDoService/CreateToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) GetAllToDo(ctx context.Context, in *GetAllToDoRequest, opts ...grpc.CallOption) (*GetAllToDoResponse, error) {
	out := new(GetAllToDoResponse)
	err := c.cc.Invoke(ctx, "/api.to_do_service.v1.ToDoService/GetAllToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) GetToDoById(ctx context.Context, in *GetToDoByIdRequest, opts ...grpc.CallOption) (*GetToDoByIdResponse, error) {
	out := new(GetToDoByIdResponse)
	err := c.cc.Invoke(ctx, "/api.to_do_service.v1.ToDoService/GetToDoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) UpdateFieldToDo(ctx context.Context, in *UpdateFieldToDoRequest, opts ...grpc.CallOption) (*UpdateFieldToDoResponse, error) {
	out := new(UpdateFieldToDoResponse)
	err := c.cc.Invoke(ctx, "/api.to_do_service.v1.ToDoService/UpdateFieldToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) UpdateToDo(ctx context.Context, in *UpdateToDoRequest, opts ...grpc.CallOption) (*UpdateToDoResponse, error) {
	out := new(UpdateToDoResponse)
	err := c.cc.Invoke(ctx, "/api.to_do_service.v1.ToDoService/UpdateToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServiceClient) DeleteToDo(ctx context.Context, in *DeleteToDoRequest, opts ...grpc.CallOption) (*DeleteToDoResponse, error) {
	out := new(DeleteToDoResponse)
	err := c.cc.Invoke(ctx, "/api.to_do_service.v1.ToDoService/DeleteToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoServiceServer is the server API for ToDoService service.
// All implementations must embed UnimplementedToDoServiceServer
// for forward compatibility
type ToDoServiceServer interface {
	CreateToDo(context.Context, *CreateToDoRequest) (*CreateToDoResponse, error)
	GetAllToDo(context.Context, *GetAllToDoRequest) (*GetAllToDoResponse, error)
	GetToDoById(context.Context, *GetToDoByIdRequest) (*GetToDoByIdResponse, error)
	UpdateFieldToDo(context.Context, *UpdateFieldToDoRequest) (*UpdateFieldToDoResponse, error)
	UpdateToDo(context.Context, *UpdateToDoRequest) (*UpdateToDoResponse, error)
	DeleteToDo(context.Context, *DeleteToDoRequest) (*DeleteToDoResponse, error)
	mustEmbedUnimplementedToDoServiceServer()
}

// UnimplementedToDoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToDoServiceServer struct {
}

func (UnimplementedToDoServiceServer) CreateToDo(context.Context, *CreateToDoRequest) (*CreateToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToDo not implemented")
}
func (UnimplementedToDoServiceServer) GetAllToDo(context.Context, *GetAllToDoRequest) (*GetAllToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllToDo not implemented")
}
func (UnimplementedToDoServiceServer) GetToDoById(context.Context, *GetToDoByIdRequest) (*GetToDoByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToDoById not implemented")
}
func (UnimplementedToDoServiceServer) UpdateFieldToDo(context.Context, *UpdateFieldToDoRequest) (*UpdateFieldToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFieldToDo not implemented")
}
func (UnimplementedToDoServiceServer) UpdateToDo(context.Context, *UpdateToDoRequest) (*UpdateToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToDo not implemented")
}
func (UnimplementedToDoServiceServer) DeleteToDo(context.Context, *DeleteToDoRequest) (*DeleteToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToDo not implemented")
}
func (UnimplementedToDoServiceServer) mustEmbedUnimplementedToDoServiceServer() {}

// UnsafeToDoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToDoServiceServer will
// result in compilation errors.
type UnsafeToDoServiceServer interface {
	mustEmbedUnimplementedToDoServiceServer()
}

func RegisterToDoServiceServer(s grpc.ServiceRegistrar, srv ToDoServiceServer) {
	s.RegisterService(&ToDoService_ServiceDesc, srv)
}

func _ToDoService_CreateToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).CreateToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.to_do_service.v1.ToDoService/CreateToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).CreateToDo(ctx, req.(*CreateToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_GetAllToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).GetAllToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.to_do_service.v1.ToDoService/GetAllToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).GetAllToDo(ctx, req.(*GetAllToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_GetToDoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToDoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).GetToDoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.to_do_service.v1.ToDoService/GetToDoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).GetToDoById(ctx, req.(*GetToDoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_UpdateFieldToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFieldToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).UpdateFieldToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.to_do_service.v1.ToDoService/UpdateFieldToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).UpdateFieldToDo(ctx, req.(*UpdateFieldToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_UpdateToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).UpdateToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.to_do_service.v1.ToDoService/UpdateToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).UpdateToDo(ctx, req.(*UpdateToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoService_DeleteToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServiceServer).DeleteToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.to_do_service.v1.ToDoService/DeleteToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServiceServer).DeleteToDo(ctx, req.(*DeleteToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToDoService_ServiceDesc is the grpc.ServiceDesc for ToDoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToDoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.to_do_service.v1.ToDoService",
	HandlerType: (*ToDoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToDo",
			Handler:    _ToDoService_CreateToDo_Handler,
		},
		{
			MethodName: "GetAllToDo",
			Handler:    _ToDoService_GetAllToDo_Handler,
		},
		{
			MethodName: "GetToDoById",
			Handler:    _ToDoService_GetToDoById_Handler,
		},
		{
			MethodName: "UpdateFieldToDo",
			Handler:    _ToDoService_UpdateFieldToDo_Handler,
		},
		{
			MethodName: "UpdateToDo",
			Handler:    _ToDoService_UpdateToDo_Handler,
		},
		{
			MethodName: "DeleteToDo",
			Handler:    _ToDoService_DeleteToDo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/to_do_service/to_do_service.proto",
}
